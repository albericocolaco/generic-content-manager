apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'org.flywaydb.flyway'

buildscript {
    repositories {
        mavenCentral()
        maven {
			url "https://plugins.gradle.org/m2/"
		}
    }
    
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE") 
        classpath("gradle.plugin.com.boxfuse.client:flyway-release:4.2.0")
        classpath files("libs/ojdbc7.jar")
    }
}

repositories {
    mavenCentral()
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.flywaydb:flyway-core:4.2.0")
	compile("org.togglz:togglz-spring-boot-starter:2.4.1.Final")
	compile('org.apache.commons:commons-lang3:3.6')
	compile("org.json:json:20171018")
	
	compile 'org.springframework.boot:spring-boot-starter-jetty:1.4.3.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compileOnly 'org.projectlombok:lombok:1.16.12'
	
	testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
	
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

war {
	archiveName 'GenericContentManagerService.war'
}

ext.applyEnvironmentConfig = { environment ->
	def environmentScript = file("gradle/dev-env.gradle")
	if (environmentScript.exists()) {
	  apply from: environmentScript
	}
}

if (hasProperty('applicationVersion')) {
	project.version = project.applicationVersion
} else {
	project.version = "SNAPSHOT";
}

if (!hasProperty('environment')) {
	def environment = 'dev'
	applyEnvironmentConfig(environment)	
} else {
	applyEnvironmentConfig(environment)
}